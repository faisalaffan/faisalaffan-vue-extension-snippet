{
  "vueinitpage": {
    "prefix": "vueinitpage",
    "body": [
      "<template>",
      "  <div>",
      "\t<MyComponents />",
      "  </div>",
      "</template>",
      "",
      "<script>",
      "export default {",
      "  name: 'MyPage',",
      "  components: {",
      "\tMyComponents: () => import('@/components/MyComponents'),",
      "  },",
      "  data: () => ({",
      "\tactivator: new ActivatorYourComponentStruct(),",
      "\theaders: HeadersTableYourComponentStruct,",
      "\tlistData: new ListDataYourComponentStruct(),",
      "\tloading: new LoadingYourComponentStruct(),",
      "\tpayload: new PayloadYourComponentStruct(),",
      "\trules: new RulesYourComponentStruct(),",
      "  }),",
      "  computed: {",
      "\tcomputedData() {",
      "\t  return this.listData",
      "\t},",
      "  },",
      "  watch: {",
      "\tlistData() {},",
      "  },",
      "  created() {",
      "\tthis.initialize()",
      "  },",
      "  destroyed() {},",
      "  methods: {",
      "\t// Inisialisasi Aplikasi Pertama Kali Dengan Get Service",
      "\tinitialize() {",
      "\t  Promise.all([this.getExampleService()])",
      "\t},",
      "\t/**",
      "\t * ? Get Data Dari Layer Service (Based On Event)",
      "\t * - Get Data",
      "\t * - On Submit (Save Data)",
      "\t * - On Click (Search Data)",
      "\t * - On Refresh (Nge Hit Initialize Lagi)",
      "\t */",
      "\tgetExampleService() {},",
      "\t/**",
      "\t * ? Cosmetics Function ( Function Yang terkait estetika )",
      "\t * - Untuk Show Hide Component",
      "\t * - Untuk Set UI Automatically Ketika Load",
      "\t * - Untuk Set Show Loading",
      "\t */",
      "\tsetAutomaticallyPayload() {},",
      "\tshowLoadingData() {},",
      "  },",
      "}",
      "</script>",
      "",
      "<style>",
      "</style>"
    ]
  },
  "vuegetservice": {
    "prefix": "vuegetservice",
    "body": [
      "async get${1:Name}Service() {",
      "\t  const res = await ${2:Your}Service.${3:get}()",
      "\t  /**",
      "\t   * TODO: Stop Loading",
      "\t   */",
      "\t  if (res.code !== 200) {",
      "\t\t/**",
      "\t\t * TODO: Implement If Failed",
      "\t\t * * Show Error Message",
      "\t\t */",
      "\t  } else {",
      "\t\t/**",
      "\t\t * TODO: Implement If Success",
      "\t\t * * Set List Data / Payload",
      "\t\t * * Set Breadcrumb",
      "\t\t */",
      "\t  }",
      "},"
    ]
  },
  "vuepostservice": {
    "prefix": "vuepostservice",
    "body": [
      "async post${1:Name}Service() {",
      "\t  /**",
      "\t   * TODO: Destructure Payload If Needed",
      "\t   */",
      "\t  const res = await ${2:Your}Service.${3:store}(this.${4:payload})",
      "\t  /**",
      "\t   * TODO: Stop Loading",
      "\t   */",
      "\t  if (res.code !== 200) {",
      "\t\t/**",
      "\t\t * TODO: Implement If Failed",
      "\t\t * * Show Popup Error Message",
      "\t\t */",
      "\t  } else {",
      "\t\t/**",
      "\t\t * TODO: Implement If Failed",
      "\t\t * * Show Popup Success Message",
      "\t\t * * Reinitilize Data By Hit Method Initialize",
      "\t\t */",
      "\t  }",
      "},"
    ]
  },
  "vueupdateservice": {
    "prefix": "vueupdateservice",
    "body": [
      "async update${1:Name}Service() {",
      "\t  /**",
      "\t   * TODO: Destructure Payload If Needed",
      "\t   */",
      "\t  const res = await ${2:Your}Service.${3:update}(${4:id}, this.${5:payload})",
      "\t  /**",
      "\t   * TODO: Stop Loading",
      "\t   */",
      "\t  if (res.code !== 200) {",
      "\t\t/**",
      "\t\t * TODO: Implement If Failed",
      "\t\t * * Show Popup Error Message",
      "\t\t */",
      "\t  } else {",
      "\t\t/**",
      "\t\t * TODO: Implement If Failed",
      "\t\t * * Show Popup Success Message",
      "\t\t * * Reinitilize Data By Hit Method Initialize",
      "\t\t */",
      "\t  }",
      "},"
    ]
  },
  "vueinitnetworkservice": {
    "prefix": "vueinitnetworkservice",
    "body": [
      "import ${1:Your}NetworkRepository from '~/modules/repositories/${1:Your}NetworkRepository'",
      "",
      "const get = () => {",
      "\t/**",
      "\t * TODO: Implement Get",
      "\t */",
      "\treturn ${1:Your}NetworkRepository.get()",
      "}",
      "const getDetail = (id) => {",
      "\t/**",
      "\t * TODO: Implement Get Detail",
      "\t */",
      "\treturn ${1:Your}NetworkRepository.getDetail()",
      "}",
      "const store = () => {",
      "\t/**",
      "\t * TODO: Implement Store",
      "\t */",
      "\treturn ${1:Your}NetworkRepository.store()",
      "}",
      "const update = () => {",
      "\t/**",
      "\t * TODO: Implement Update",
      "\t */",
      "\treturn ${1:Your}NetworkRepository.update()",
      "}",
      "const destroy = () => {",
      "\t/**",
      "\t * TODO: Implement Destroy",
      "\t */",
      "\treturn ${1:Your}NetworkRepository.destroy()",
      "}",
      "",
      "const ${1:Your}Service = { get, getDetail, store, update, destroy }",
      "",
      "export default ${1:Your}Service",
      ""
    ]
  },
  "vueinitdummyservice": {
    "prefix": "vueinitdummyservice",
    "body": [
      "import ${1:Your}DummyRepository from '~/modules/repositories/${1:Your}DummyRepository'",
      "",
      "const get = () => {",
      "\t/**",
      "\t * TODO: Implement Get",
      "\t */",
      "\treturn ${1:Your}DummyRepository.get()",
      "}",
      "const getDetail = (id) => {",
      "\t/**",
      "\t * TODO: Implement Get Detail",
      "\t */",
      "\treturn ${1:Your}DummyRepository.getDetail()",
      "}",
      "const store = () => {",
      "\t/**",
      "\t * TODO: Implement Store",
      "\t */",
      "\treturn ${1:Your}DummyRepository.store()",
      "}",
      "const update = () => {",
      "\t/**",
      "\t * TODO: Implement Update",
      "\t */",
      "\treturn ${1:Your}DummyRepository.update()",
      "}",
      "const destroy = () => {",
      "\t/**",
      "\t * TODO: Implement Destroy",
      "\t */",
      "\treturn ${1:Your}DummyRepository.destroy()",
      "}",
      "",
      "const ${1:Your}Service = { get, getDetail, store, update, destroy }",
      "",
      "export default ${1:Your}Service",
      ""
    ]
  },
  "vueinitcomponentstruct": {
    "prefix": "vueinitcomponentstruct",
    "body": [
      "import Rules from \"~/plugins/Rules\";",
      "",
      "export class Activator${1:YourComponent}ComponentStruct {",
      "  constructor() {",
      "\t/**",
      "\t * TODO: Implement Activator",
      "\t */",
      "\tthis.isShowNew = true;",
      "\tthis.isShowPrint = false;",
      "\tthis.isShowSave = false;",
      "\tthis.isValidForm = false;",
      "  }",
      "}",
      "",
      "export class Loading${1:YourComponent}ComponentStruct {",
      "  constructor() {",
      "\t/**",
      "\t * TODO: Implement Loading State",
      "\t */",
      "\tthis.loading = true;",
      "  }",
      "}",
      "",
      "export class Rules${1:YourComponent}ComponentStruct {",
      "  constructor() {",
      "\t/**",
      "\t * TODO: Implement Rules",
      "\t */",
      "\tthis.number = (v) => Rules.number(v);",
      "\tthis.required = (v) => Rules.required(v);",
      "\tthis.greaterThan = (v, number) => Rules.greaterThan(v, number);",
      "  }",
      "}",
      "",
      "export const HeadersTable${1:YourComponent}ComponentStruct = [",
      "  /**",
      "   * TODO: Implement Headers Table",
      "   */",
      "  {",
      "\ttext: \"No\",",
      "\talign: \"center\",",
      "\tsortable: false,",
      "\tvalue: \"no\"",
      "  },",
      "  { text: \"Nama\", sortable: false, value: \"nama\", align: \"left\" },",
      "  { text: \"Action\", sortable: false, value: \"actions\", align: \"center\" }",
      "];",
      "",
      "export class Pagination${1:YourComponent}ComponentStruct {",
      "  constructor() {",
      "\t/**",
      "\t * TODO: Implement Pagination",
      "\t */",
      "\tthis.page = 1;",
      "\tthis.pageCount = 0;",
      "\tthis.itemsPerPage = 3;",
      "  }",
      "}",
      "",
      "export class ListData${1:YourComponent}ComponentStruct {",
      "  constructor() {",
      "\t/**",
      "\t * TODO: Implement List Data",
      "\t * * Get From API",
      "\t */",
      "\tthis.barang = [];",
      "  }",
      "}",
      "",
      "export class SearchData${1:YourComponent}ComponentStruct {",
      "  constructor() {",
      "\t/**",
      "\t * TODO: Implement Search Data",
      "\t * ? If Search Data Ada",
      "\t */",
      "\tthis.barcode = \"\";",
      "\tthis.barcodeInput = \"\";",
      "  }",
      "}",
      "",
      "export class PayloadData${1:YourComponent}ComponentStruct {",
      "  constructor() {",
      "\t/**",
      "\t * TODO: Implement Search Data",
      "\t * ? Ini Payload Untuk Submit (Store / Update)",
      "\t */",
      "\tthis.keterangan = \"-\";",
      "  }",
      "}",
      "",
      ""
    ]
  },
  "vueinitnetworkrepository": {
    "prefix": "vueinitnetworkrepository",
    "body": [
      "import Http from '~/plugins/Http'",
      "",
      "const get = async () => {",
      "  /**",
      "   * TODO: Implement Get API ${2:endpoint}",
      "   */",
      "  const response = await Http.get('/${2:endpoint}')",
      "  if (response.code !== 200) {",
      "\t/**",
      "\t * TODO: Implement Jika ${2:endpoint} Get Gagal",
      "\t * * Destructure Berdasarkan Network Repostiory Struct (Harus)",
      "\t */",
      "\treturn response",
      "  }",
      "  return response",
      "}",
      "",
      "const store = async (payload) => {",
      "  /**",
      "   * TODO: Implement Post API ${2:endpoint}",
      "   * * Destructure Berdasarkan Network Repostiory Struct (Harus)",
      "   */",
      "  const response = await Http.post('/${2:endpoint}', payload)",
      "  if (response.code !== 200) {",
      "\t/**",
      "\t * TODO: Implement Jika ${2:endpoint} Post Gagal",
      "\t */",
      "\treturn response",
      "  }",
      "  return response",
      "}",
      "",
      "const update = async (${3:id}, payload) => {",
      "  const response = await Http.store(`/${2:endpoint}/${3:${id}}`, payload)",
      "  if (response.code !== 200) {",
      "\t/**",
      "\t * TODO: Implement Jika ${2:endpoint} Update Gagal",
      "\t * * Destructure Berdasarkan Network Repostiory Struct (Harus)",
      "\t */",
      "\treturn response",
      "  }",
      "  return response",
      "}",
      "",
      "const destroy = async (${3:id}) => {",
      "  const response = await Http.get(`/${2:endpoint}/${3:${id}}`)",
      "  if (response.code !== 200) {",
      "\t/**",
      "\t * TODO: Implement Jika ${2:endpoint} Destroy Gagal",
      "\t */",
      "\treturn response",
      "  }",
      "  return response",
      "}",
      "",
      "const ${1:Your}NetworkRepository = {",
      "  get,",
      "  store,",
      "  update,",
      "  destroy,",
      "}",
      "",
      "export default ${1:Your}NetworkRepository",
    ]
  },
  "vueinitdummyrepository": {
    "prefix": "vueinitdummyrepository",
    "body": [
      "import FakeResponse from '~/plugins/FakeResponse'",
      "",
      "const get = () => {",
      "  const data = ${1:Your}DummyResponseStruct;",
      "  return Promise.resolve(FakeResponse.success(data, 'Berhasil Get Data'));",
      "}",
      "",
      "const getDetail = () => {",
      "  const data = ${1:Your}DummyResponseStruct;",
      "  return Promise.resolve(FakeResponse.success(data, 'Berhasil Get Detail Data'));",
      "}",
      "",
      "const store = (payload) => {",
      "  return Promise.resolve(FakeResponse.storeSuccess('Berhasil Insert Data'));",
      "}",
      "",
      "const update = (id, payload) => {",
      "  return Promise.resolve(FakeResponse.storeSuccess('Berhasil Update Data'));",
      "}",
      "",
      "const destroy = (id) => {",
      "  return Promise.resolve(FakeResponse.storeSuccess(`Berhasil Delete Data ${id}`));",
      "}",
      "",
      "const ${1:Your}DummyRepository = {",
      "  get,",
      "  getDetail,",
      "  store,",
      "  update,",
      "  destroy,",
      "}",
      "",
      "export default ${1:Your}DummyRepository"
    ]
  }
}